{"version":3,"sources":["models/utils.js","models/GameModel.js","components/Card.js","components/Board.js","components/Player.js","components/LeadersTable.js","App.js","models/PlayersModel.js","reportWebVitals.js","index.js"],"names":["deepCopy","array","JSON","parse","stringify","shuffleArray","i","length","j","Math","floor","random","numberOfVariants","cards","reduce","v","c","max","variant","dealCards","push","open","utils","variantRevealed","filter","card","every","Card","props","backSide","className","onClick","cardIndex","children","Board","gridStyle","gridTemplateColumns","sqrt","toPrecision","style","Player","active","name","score","LeadersTable","randomEmoji","n","emoji","Array","keys","map","String","fromCodePoint","history","Game","useState","setCards","setEmoji","hasTurn","players","setPlayers","handleCardClick","cardsNext","openCard","unrevealedVariants","from","openUnrevealed","includes","hasMismatched","current","findIndex","player","nextPlayerTurn","window","setTimeout","forEach","closeUnrevealed","currentPlayerIndex","increasePlayerScore","useEffect","localStorage","getItem","setItem","playerElements","cardElements","Fragment","resetPlayers","prev","pop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35703d06.chunk.js","sourcesContent":["export function deepCopy(array) {\n  return JSON.parse(JSON.stringify(array));\n}\n\n// Shuffle array in-place\nexport function shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\n\n","/**\n * Game is modeled as an array of cards objects (board). Each card is one of N variants.\n * The objective of the game is to open all cards of the same variant in player's turn.\n * \n * Cards and array of cards are immutable. As the game progresses new array of cards is generated.\n * e.g. to flip a card, new array of cards is created with a card flipped\n * i.e. game state fully represented as an array of cards\n * \n * Card object has following properties\n * ```\n * {\n *  open: {Boolean},  // card is opened\n *  variant: {Number} // variants are numbered from 0 to N\n * }\n * ```\n * \n * Set of operation:\n * \n * Query functions - ask questions about the state\n * - variantRevealed :: [Card], Variant => Boolean \n * - hasMismatched :: [Card] => Boolean\n * \n * State transition functions - move from current state to next\n * - dealCards :: void => [Card]\n * - openCard :: [Card], Number => [Card]\n * - closeUnrevealed :: [Card] => [Card]\n */\nimport * as utils from '../models/utils';\n\nconst VARIANTS_DEFAULT = 3; // default number of card variants\nconst VARIANTS_COPIES = 3; // amount of copies of each variant\n\nfunction numberOfVariants(cards) {\n  let variants = cards.reduce((v, c) => Math.max(c.variant, v), 0);\n  return variants + 1;\n}\n\nexport function dealCards(numberOfVariants = VARIANTS_DEFAULT) {\n  let cards = [];\n  for (let v = 0; v < numberOfVariants; v++) \n    for (let j = 0; j < VARIANTS_COPIES; j++)\n      cards.push({\n        open: false,\n        variant: v\n      });\n  \n  utils.shuffleArray(cards);\n\n  return cards;\n}\n\n/**\n * Check if a variant is revealed. \n *  \n * @param {[Card]} cards \n * @param {Number} variant \n * @returns Boolean\n */\nexport function variantRevealed(cards, variant) {\n  return cards.filter(card => card.variant === variant).every(card => card.open);\n}\n\n/**\n * Open (show the front of) a card\n *  \n * @param {[Card]} cards \n * @param {Number} i card number \n * @return {[Card]}\n */\nexport function openCard(cards, i) {\n  // eslint-disable-next-line\n  var cards = [...cards]; // discard input, work with copy \n  cards[i].open = true; \n\n  return cards;\n}\n\n/**\n * Number of revealed variants\n *  \n * @param {[Card]} cards \n * @returns {Number} \n */\nexport function revealedVariants(cards) {\n  let count = cards.reduce((count, card) => {\n    if(!count[card.variant]) \n      count[card.variant] = 0;\n    else\n      count[card.variant]++;\n    return count;\n  }, []);\n\n  const variantCopies = cards.length / numberOfVariants(cards);\n  return count.filter(n => n === variantCopies).length;\n}\n\n/**\n * Close all unrevealed cards\n *  \n * @param {[Cards]} cards \n * @returns {[Cards]}\n */\nexport function closeUnrevealed(cards) {\n  // eslint-disable-next-line\n  var cards = [...cards]; // discard input, work with copy \n  let variants = Array.from({length: cards.length / 2}, (v, i) => i);\n  let unrevealedVariants = variants.filter(variant => !variantRevealed(cards, variant));\n  cards.forEach(card => {\n    card.open = !unrevealedVariants.includes(card.variant);\n  });\n\n  return cards;\n}\n\n/**\n * Boards has open mismatched cards\n * \n * @param {[Card]} cards \n * @returns {Boolean}\n */\nexport function hasMismatched(cards) {\n  // eslint-disable-next-line\n  var cards = [...cards]; // discard input, work with copy \n\n  let variants = Array.from({length: numberOfVariants(cards)}, (v, i) => i);\n  let unrevealedVariants = variants.filter(variant => !variantRevealed(cards, variant));\n  let openUnrevealed = cards.filter(card => card.open && unrevealedVariants.includes(card.variant));\n\n  return !openUnrevealed.every(card => card.variant === openUnrevealed[0].variant);\n}\n\n","import './Card.css';\n\n/**\n * Card element\n * @prop {card_object} card card object \n * @prop {function} onClick \n */\nfunction Card(props) {\n  const backSide = (\n    <div className=\"stacked-linear-background\"></div>\n  );\n\n  return (\n    <div className=\"card\" onClick={() => props.onClick(props.cardIndex)}>\n      {props.open ? props.children : backSide}\n    </div>\n  );\n}\n\nexport default Card;","import './Board.css';\n\nfunction Board(props) {\n  let gridStyle = {\n    gridTemplateColumns: `repeat(${Math.sqrt(props.children.length).toPrecision(1)}, 1fr)`\n  };\n\n  return (\n    <div className=\"board\" style={gridStyle}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Board;","import './Player.css';\n\nfunction Player(props) {\n  return (\n    <div className={\"player \" + (props.active ? \"highlightPlayer\": \"\")}>\n      {props.name} : {props.score}\n    </div>\n  );\n}\n\nexport default Player;\n","import './LeadersTable.css';\n\nfunction LeadersTable(props) {\n  return (\n    <div className=\"leaders-table\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default LeadersTable;\n","import React, { useState, useEffect } from 'react';\nimport {dealCards, openCard, closeUnrevealed, hasMismatched, variantRevealed} from './models/GameModel';\nimport {nextPlayerTurn, increasePlayerScore, resetPlayers, createPlayers} from './models/PlayersModel';\nimport * as utils from './models/utils';\nimport Card from './components/Card'\nimport Board from './components/Board'\nimport Player from './components/Player'\nimport LeadersTable from './components/LeadersTable'\nimport './App.css';\n\nconst NUMBER_OF_VARIANTS = 4;\n\nfunction randomEmoji(n) {\n  const emoji = [...Array(0x4F).keys()]\n    .map(n => String.fromCodePoint(0x1F600+n));\n\n  utils.shuffleArray(emoji);\n\n  return emoji;\n}\n\nlet history = [];\n\nfunction Game() {\n  const [cards, setCards] = useState(dealCards(NUMBER_OF_VARIANTS));\n  const [emoji, setEmoji] = useState(randomEmoji(NUMBER_OF_VARIANTS));\n  const [players, setPlayers] = useState(createPlayers());\n\n  useEffect(() => {\n    setCards(JSON.parse(window.localStorage.getItem('cards')) || dealCards(NUMBER_OF_VARIANTS));\n    setEmoji(JSON.parse(window.localStorage.getItem('emoji')) || randomEmoji(NUMBER_OF_VARIANTS));\n    setPlayers(JSON.parse(window.localStorage.getItem('players')) || createPlayers());\n  }, []);\n\n  useEffect(() => {\n    window.localStorage.setItem('cards', JSON.stringify(cards));\n    window.localStorage.setItem('emoji', JSON.stringify(emoji));\n    window.localStorage.setItem('players', JSON.stringify(players));\n  }, [cards, players, emoji]);\n\n  // i - index of a card has been clicked\n  function handleCardClick(i) {\n    if (cards[i].open) return; // do nothing if card is already opened\n\n    // save current state\n    history.push({\n      cards: utils.deepCopy(cards),\n      players: utils.deepCopy(players)\n    });\n\n    // move to next state\n    let cardsNext = openCard(cards, i);\n    setCards(cardsNext);\n\n    if (hasMismatched(cardsNext)) { // if wrong card opened\n      setPlayers(nextPlayerTurn(players)); // change player\n      window.setTimeout(() => { // close wrongly opened cards\n        setCards(closeUnrevealed(cards));\n      }, 500);\n    }\n\n    if (variantRevealed(cardsNext, cardsNext[i].variant)) { // success! the variant is revealed\n      setPlayers(increasePlayerScore(players)); // score the lucky fellow\n    }\n  }\n\n  function resetGame() {\n    history = [];\n    setCards(dealCards(NUMBER_OF_VARIANTS));\n    setEmoji(randomEmoji(NUMBER_OF_VARIANTS));\n    setPlayers(resetPlayers(players));\n  }\n\n  function undo() {\n    if (history.length > 0) {\n      const prev = history.pop();\n      setCards(prev.cards);\n      setPlayers(prev.players);\n    }\n  }\n\n  const playerElements = players.map((player, i) => \n    <Player active={player.hasTurn} \n            name={player.name} \n            score={player.score} \n            key={i}/>\n  );\n\n  const cardElements = cards.map((card, i) => \n    <Card cardIndex={i} \n          open={card.open} \n          onClick={handleCardClick}\n          key={i}>\n      <div>\n        {emoji[card.variant]}\n      </div>\n    </Card>\n  );\n\n  return (\n    <React.Fragment>\n      <header>Open three in a row!</header>\n      <main>\n        <div>\n          <LeadersTable>{playerElements}</LeadersTable>\n          <div className=\"button-bar\">\n            <button onClick={resetGame}>Reset</button>\n            <button onClick={undo}>Undo</button>\n          </div>\n        </div>\n        <div>\n          <Board>{cardElements}</Board>\n        </div>\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default Game;\n","export function createPlayers() {\n   const players = [\n    {name: 'Player 1', score: 0, hasTurn: true}, \n    {name: 'Player 2', score: 0, hasTurn: false}\n  ];\n  \n  return players;\n}\n\nexport function currentPlayerIndex(players) {\n  return players.findIndex(player=> player.hasTurn);\n}\n\nexport function increasePlayerScore(players) {\n  // eslint-disable-next-line\n  var players = [...players];\n  players[currentPlayerIndex(players)].score++;\n  return players;\n}\n\nexport function resetPlayers(players) {\n  // eslint-disable-next-line\n  var players = [...players]; // discard input, work with copy\n\n  players.forEach(player => {\n    player.score = 0;\n    player.hasTurn = false;\n  });\n  players[0].hasTurn = true;\n\n  return players;\n}\n\nexport function nextPlayerTurn(players) {\n  // eslint-disable-next-line\n  var players = [...players]; // discard input, work with copy\n  const current = players.findIndex(player => player.hasTurn);\n  players[current].hasTurn = false;\n  players[(current+1) % players.length].hasTurn = true;\n\n  return players;\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}