{"version":3,"sources":["models/utils.js","models/GameModel.js","models/PlayersModel.js","components/Card.js","components/Board.js","components/Player.js","components/LeadersTable.js","components/WinnerBanner.js","App.js","reportWebVitals.js","index.js"],"names":["deepCopy","array","JSON","parse","stringify","shuffleArray","i","length","j","Math","floor","random","numberOfVariants","cards","reduce","v","c","max","variant","dealCards","push","open","utils","variantRevealed","filter","card","every","winnerName","players","sum","p","score","sort","p1","p2","name","Card","props","backSide","className","onClick","cardIndex","children","Board","gridStyle","gridTemplateColumns","sqrt","toPrecision","style","Player","active","type","value","minLength","maxLength","size","onChange","LeadersTable","WinnerBanner","randomEmoji","n","emoji","Array","keys","map","String","fromCodePoint","Game","useState","setCards","setEmoji","hasTurn","setPlayers","history","setHistory","handleCardClick","state","concat","cardsNext","openCard","unrevealedVariants","from","openUnrevealed","includes","hasMismatched","current","findIndex","player","nextPlayerTurn","window","setTimeout","forEach","closeUnrevealed","currentPlayerIndex","increasePlayerScore","handleUserNameChange","e","setPlayerName","target","useEffect","localStorage","getItem","setItem","playerElements","cardElements","resetPlayers","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.795bf680.chunk.js","sourcesContent":["export function deepCopy(array) {\n  return JSON.parse(JSON.stringify(array));\n}\n\n// Shuffle array in-place\nexport function shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\n\n","/**\n * Game is modeled as an array of cards objects (board). Each card is one of N variants.\n * The objective of the game is to open all cards of the same variant in player's turn.\n * \n * Cards and array of cards are immutable. As the game progresses new array of cards is generated.\n * e.g. to flip a card, new array of cards is created with a card flipped\n * i.e. game state fully represented as an array of cards\n * \n * Card object has following properties\n * ```\n * {\n *  open: {Boolean},  // card is opened\n *  variant: {Number} // variants are numbered from 0 to N\n * }\n * ```\n * \n * Set of operation:\n * \n * Query functions - ask questions about the state\n * - variantRevealed :: [Card], Variant => Boolean \n * - hasMismatched :: [Card] => Boolean\n * \n * State transition functions - move from current state to next\n * - dealCards :: void => [Card]\n * - openCard :: [Card], Number => [Card]\n * - closeUnrevealed :: [Card] => [Card]\n */\nimport * as utils from '../models/utils';\n\nconst VARIANTS_DEFAULT = 3; // default number of card variants\nconst VARIANTS_COPIES = 3; // amount of copies of each variant\n\nexport function numberOfVariants(cards) {\n  let variants = cards.reduce((v, c) => Math.max(c.variant, v), 0);\n  return variants + 1;\n}\n\nexport function dealCards(numberOfVariants = VARIANTS_DEFAULT) {\n  let cards = [];\n  for (let v = 0; v < numberOfVariants; v++) \n    for (let j = 0; j < VARIANTS_COPIES; j++)\n      cards.push({\n        open: false,\n        variant: v\n      });\n  \n  utils.shuffleArray(cards);\n\n  return cards;\n}\n\n/**\n * Check if a variant is revealed. \n *  \n * @param {[Card]} cards \n * @param {Number} variant \n * @returns Boolean\n */\nexport function variantRevealed(cards, variant) {\n  return cards.filter(card => card.variant === variant).every(card => card.open);\n}\n\n/**\n * Open (show the front of) a card\n *  \n * @param {[Card]} cards \n * @param {Number} i card number \n * @return {[Card]}\n */\nexport function openCard(cards, i) {\n  // eslint-disable-next-line\n  var cards = [...cards]; // discard input, work with copy \n  cards[i].open = true; \n\n  return cards;\n}\n\n/**\n * Number of revealed variants\n *  \n * @param {[Card]} cards \n * @returns {Number} \n */\nexport function revealedVariants(cards) {\n  let count = cards.reduce((count, card) => {\n    if(!count[card.variant]) \n      count[card.variant] = 0;\n    else\n      count[card.variant]++;\n    return count;\n  }, []);\n\n  const variantCopies = cards.length / numberOfVariants(cards);\n  return count.filter(n => n === variantCopies).length;\n}\n\n/**\n * Close all unrevealed cards\n *  \n * @param {[Cards]} cards \n * @returns {[Cards]}\n */\nexport function closeUnrevealed(cards) {\n  // eslint-disable-next-line\n  var cards = [...cards]; // discard input, work with copy \n  let variants = Array.from({length: cards.length / 2}, (v, i) => i);\n  let unrevealedVariants = variants.filter(variant => !variantRevealed(cards, variant));\n  cards.forEach(card => {\n    card.open = !unrevealedVariants.includes(card.variant);\n  });\n\n  return cards;\n}\n\n/**\n * Boards has open mismatched cards\n * \n * @param {[Card]} cards \n * @returns {Boolean}\n */\nexport function hasMismatched(cards) {\n  // eslint-disable-next-line\n  var cards = [...cards]; // discard input, work with copy \n\n  let variants = Array.from({length: numberOfVariants(cards)}, (v, i) => i);\n  let unrevealedVariants = variants.filter(variant => !variantRevealed(cards, variant));\n  let openUnrevealed = cards.filter(card => card.open && unrevealedVariants.includes(card.variant));\n\n  return !openUnrevealed.every(card => card.variant === openUnrevealed[0].variant);\n}\n\n","export function createPlayers() {\n   const players = [\n    {name: 'Player 1', score: 0, hasTurn: true}, \n    {name: 'Player 2', score: 0, hasTurn: false}\n  ];\n  \n  return players;\n}\n\nexport function winnerName(players, max) {\n  // eslint-disable-next-line\n  var players = [...players]; // defensive copy\n  const sum = players.reduce((sum, p) => sum + p.score, 0);\n  if (sum === max) {\n    players.sort((p1, p2) => p2.score - p1.score);\n    if (players[0].score === players[1].score) \n      return \"a tie\";\n    else\n      return players[0].name;\n  }\n\n  return null;\n}\n\nexport function setPlayerName(players, i, name) {\n  // eslint-disable-next-line\n  var players = [...players];\n  players[i].name = name;\n  return players;\n}\n\nexport function currentPlayerIndex(players) {\n  return players.findIndex(player=> player.hasTurn);\n}\n\nexport function increasePlayerScore(players) {\n  // eslint-disable-next-line\n  var players = [...players];\n  players[currentPlayerIndex(players)].score++;\n  return players;\n}\n\nexport function resetPlayers(players) {\n  // eslint-disable-next-line\n  var players = [...players]; // discard input, work with copy\n\n  players.forEach(player => {\n    player.score = 0;\n    player.hasTurn = false;\n  });\n  players[0].hasTurn = true;\n\n  return players;\n}\n\nexport function nextPlayerTurn(players) {\n  // eslint-disable-next-line\n  var players = [...players]; // discard input, work with copy\n  const current = players.findIndex(player => player.hasTurn);\n  players[current].hasTurn = false;\n  players[(current+1) % players.length].hasTurn = true;\n\n  return players;\n}\n\n","import './Card.css';\n\nfunction Card(props) {\n  const backSide = (\n    <div className=\"stacked-linear-background\"></div>\n  );\n\n  return (\n    <div className=\"card\" onClick={() => props.onClick(props.cardIndex)}>\n      {props.open ? props.children : backSide}\n    </div>\n  );\n}\n\nexport default Card;","import './Board.css';\n\nfunction Board(props) {\n  let gridStyle = {\n    gridTemplateColumns: `repeat(${Math.sqrt(props.children.length).toPrecision(1)}, 1fr)`\n  };\n\n  return (\n    <div className=\"board\" style={gridStyle}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Board;","import './Player.css';\n\nfunction Player(props) {\n  return (\n    <div className={\"player \" + (props.active ? \"highlightPlayer\": \"\")}>\n      <input \n        type=\"text\" \n        value={props.name} \n        minLength=\"1\" \n        maxLength=\"10\" \n        size=\"6\" \n        onChange={props.onChange}/> : {props.score}\n    </div>\n  );\n}\n\nexport default Player;\n","import './LeadersTable.css';\n\nfunction LeadersTable(props) {\n  return (\n    <div className=\"leaders-table\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default LeadersTable;\n","import './WinnerBanner.css';\n\nfunction WinnerBanner(props) {\n  return (\n    <div className=\"banner\">\n      {props.name ? \"win: \" + props.name + \"🎉\" : \"\"}\n    </div>\n  );\n}\n\nexport default WinnerBanner;","import React, { useState, useEffect } from 'react';\nimport {dealCards, openCard, closeUnrevealed, hasMismatched, variantRevealed, numberOfVariants} from './models/GameModel';\nimport {nextPlayerTurn, increasePlayerScore, resetPlayers, createPlayers, setPlayerName, winnerName} from './models/PlayersModel';\nimport * as utils from './models/utils';\nimport Card from './components/Card';\nimport Board from './components/Board';\nimport Player from './components/Player';\nimport LeadersTable from './components/LeadersTable';\nimport WinnerBanner from './components/WinnerBanner';\nimport './App.css';\n\nconst NUMBER_OF_VARIANTS = 4;\n\nfunction randomEmoji(n) {\n  // UTF codepoints for emoji: 0x1F600 - 0x1F64F\n  const emoji = [...Array(0x4F).keys()]\n    .map(n => String.fromCodePoint(0x1F600+n));\n\n  utils.shuffleArray(emoji);\n\n  return emoji;\n}\n\nfunction Game() {\n  const [cards, setCards] = useState(dealCards(NUMBER_OF_VARIANTS));\n  const [emoji, setEmoji] = useState(randomEmoji(NUMBER_OF_VARIANTS));\n  const [players, setPlayers] = useState(createPlayers());\n\n  const [history, setHistory] = useState([]);\n\n  useEffect(() => {\n    setCards(JSON.parse(window.localStorage.getItem('cards')) || dealCards(NUMBER_OF_VARIANTS));\n    setEmoji(JSON.parse(window.localStorage.getItem('emoji')) || randomEmoji(NUMBER_OF_VARIANTS));\n    setPlayers(JSON.parse(window.localStorage.getItem('players')) || createPlayers());\n  }, []);\n\n  useEffect(() => {\n    window.localStorage.setItem('cards', JSON.stringify(cards));\n    window.localStorage.setItem('emoji', JSON.stringify(emoji));\n    window.localStorage.setItem('players', JSON.stringify(players));\n  }, [cards, players, emoji]);\n\n  // i - index of a card has been clicked\n  function handleCardClick(i) {\n    if (cards[i].open) return; // do nothing if card is already opened\n\n    // save current state\n    const state = {\n      cards: utils.deepCopy(cards),\n      players: utils.deepCopy(players)\n    };\n    setHistory(history.concat(state));\n\n    // move to next state\n    let cardsNext = openCard(cards, i);\n    setCards(cardsNext);\n\n    if (hasMismatched(cardsNext)) { // if wrong card opened\n      setPlayers(nextPlayerTurn(players)); // change player\n      window.setTimeout(() => { // close wrongly opened cards\n        setCards(closeUnrevealed(cards));\n      }, 500);\n    }\n\n    if (variantRevealed(cardsNext, cardsNext[i].variant)) { // success! the variant is revealed\n      setPlayers(increasePlayerScore(players)); // score the lucky fellow\n    }\n  }\n\n  function resetGame() {\n    setCards(dealCards(NUMBER_OF_VARIANTS));\n    setEmoji(randomEmoji(NUMBER_OF_VARIANTS));\n    setPlayers(resetPlayers(players));\n    setHistory([]);\n  }\n\n  function undo() {\n    if (history.length > 0) {\n      setCards(history[history.length-1].cards);\n      setPlayers(history[history.length-1].players);\n      setHistory(history.slice(0, -1));\n    }\n  }\n\n  function handleUserNameChange(e,i) {\n    setPlayers(setPlayerName(players, i, e.target.value));\n  }\n\n  const playerElements = players.map((player, i) => \n    <Player active={player.hasTurn} \n            name={player.name} \n            score={player.score} \n            onChange={e => handleUserNameChange(e, i)}\n            key={i}/>\n  );\n\n  const cardElements = cards.map((card, i) => \n    <Card cardIndex={i} \n          open={card.open} \n          onClick={handleCardClick}\n          key={i}>\n      <div>\n        {emoji[card.variant]}\n      </div>\n    </Card>\n  );\n\n  return (\n    <>\n      <header>Turn over 3 cards. Find 3 matches - get a score!</header>\n      <main>\n        <div>\n          <LeadersTable>{playerElements}</LeadersTable>\n          <div className=\"button-bar\">\n            <button onClick={resetGame}>Restart</button>\n            <button onClick={undo}>Undo</button>\n          </div>\n          <WinnerBanner name={winnerName(players, numberOfVariants(cards))} />\n        </div>\n        <div>\n          <Board>{cardElements}</Board>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}