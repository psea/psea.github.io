{"version":3,"sources":["components/Card.module.css","components/GameStatistics.module.css","components/ButtonBar.module.css","components/Answer.module.css","components/Question.module.css","components/GameLayout.module.css","components/QuizGame.module.css","components/TimeoutBar.module.css","App.module.css","components/GameStatistics.tsx","components/ButtonBar.tsx","components/Answer.tsx","components/Question.tsx","components/Card.tsx","components/GameLayout.tsx","components/ViewSwitch.tsx","utils/useTimer.ts","utils/useIterator.ts","models/gameReducer.ts","components/TimeoutBar.tsx","components/QuizGame.tsx","utils/test-questions-text.ts","utils/test-questions-images.ts","utils/quizapi-io.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","GameStat","correct","incorrect","unanswered","className","styles","statistics","ButtonBar","revealBonusDisabled","timeBonusDisabled","onRevealBonus","onTimeBonus","disabled","onClick","document","location","reload","bind","window","Answer","visible","children","answer","Question","imageStyle","backgroundImage","toString","backgroundSize","backgroundPosition","backgroundRepeat","height","question","style","URL","undefined","Card","onAnswer","answerItems","answers","map","a","i","card","GameLayout","ViewSwitch","find","c","props","show","View","useTimer","time","onExpire","useState","timeLeft","setTimeLeft","intervalID","useRef","isRunning","useEffect","current","id","setInterval","t","clearInterval","stopTimer","resetTimer","useIterator","iterable","iterRef","Symbol","iterator","next","value","setValue","done","initGame","maxQuestions","hasTimeBonus","hasRevealBonus","isGameOver","gameReducer","state","action","type","totalAnswers","Error","TimeoutBar","max","TIMEOUT","QuizGame","questions","useReducer","dispatch","nextQuestion","isCorrect","incorrectAnswers","filter","_","shuffle","GameStatistics","answerStub","getMathQuestion","n","range","createStringTestQuestions","BREEDS","random","this","length","fetch","res","json","imageURL","message","breed","pathname","split","push","createImagesTestQuestions","QUESTIONS_ENDPOINT","API_TOKEN","process","toQuestionData","qdata","category","correct_answer","headers","then","q","multiple_correct_answers","fetchQuizApiIoQuestions","console","clear","App","setQuestions","loading","setLoading","gameDataReady","createImageTestQuestions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,wB,iBCAtDD,EAAOC,QAAU,CAAC,WAAa,qC,gBCA/BD,EAAOC,QAAU,CAAC,aAAa,gC,gBCA/BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,KAAO,2B,gBCAzBD,EAAOC,QAAU,CAAC,YAAY,8B,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,gC,gBCA9BD,EAAOC,QAAU,CAAC,WAAW,wB,0ICiBdC,MAVf,YAAqE,IAAlDC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,WACrC,OACE,0BAASC,UAAWC,IAAOC,WAA3B,UACGL,EAAU,0CAAcA,KAAgB,GACxCC,EAAY,4CAAgBA,EAAhB,OAAmC,GAC/CC,EAAa,6CAAiBA,EAAjB,OAAqC,O,iBCc1CI,MAlBf,YAA0G,IAAtFC,EAAqF,EAArFA,oBAAqBC,EAAgE,EAAhEA,kBAAmBC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,YACzE,OACE,0BAASP,UAAWC,IAAO,cAA3B,UACE,wBACEO,SAAUJ,EACVK,QAASH,EAFX,qBAKA,wBACEE,SAAUH,EACVI,QAASF,EAFX,mBAKA,wBAAQE,QAAS,kBAAMC,SAASC,SAASC,OAAOC,KAAKC,OAAOH,SAArCD,IAAvB,sB,iBCLSK,MARf,YAAuE,IAArDC,EAAoD,EAApDA,QAASnB,EAA2C,EAA3CA,QAASY,EAAkC,EAAlCA,QAASQ,EAAyB,EAAzBA,SAC3C,OACE,wBAAQT,UAAWQ,EAAShB,UAAWC,IAAOiB,OAAQT,QAAS,kBAAMA,EAAQZ,IAA7E,SACGoB,K,iBCWQE,MAjBf,YAAgD,IAA5BF,EAA2B,EAA3BA,SAEZG,EAAa,CACjBC,gBAAgB,OAAD,OAASJ,EAASK,WAAlB,KACfC,eAAgB,UAChBC,mBAAoB,SACpBC,iBAAkB,YAClBC,OAAQ,QAGV,OACE,yBAAS1B,UAAWC,IAAO0B,SAAUC,MAAOX,aAAoBY,IAAMT,OAAaU,EAAnF,SACEb,aAAoBY,IAAM,GAAKZ,K,gBCsBtBc,MAzBf,YAAgD,IAAjCJ,EAAgC,EAAhCA,SAAUK,EAAsB,EAAtBA,SACvB,IAAKL,EACH,OACE,uFAGJ,IAAMM,EAAW,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAUO,QAAQC,KAAK,SAACC,EAAGC,GAAJ,OACzC,cAAC,EAAD,CACErB,QAASoB,EAAEpB,QACXnB,QAASuC,EAAEvC,QACXY,QAASuB,EAHX,SAIKI,EAAElB,QAJMmB,MAQf,OACE,0BAASrC,UAAWC,IAAOqC,KAA3B,UACE,cAAC,EAAD,UAAWX,EAASA,WACpB,yBAAS3B,UAAWC,IAAOiC,QAA3B,SACGD,Q,iBCrBMM,MAXf,YAAqC,IAAhBtB,EAAe,EAAfA,SACnB,OACE,sBAAKjB,UAAWC,IAAM,KAAtB,UACE,8BAAMgB,EAAS,KADjB,IAEE,8BAAMA,EAAS,KAFjB,IAGE,8BAAMA,EAAS,KAHjB,IAIE,8BAAMA,EAAS,KAJjB,QCEG,SAASuB,EAAT,GAAkD,IAA7BvB,EAA4B,EAA5BA,SAC1B,OACE,mCACGA,EAASwB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,UAU3B,SAASC,EAAT,GAA2C,EAA5BD,KAA6B,IAAvB3B,EAAsB,EAAtBA,SAC1B,OACE,mCACGA,ICiBQ6B,MArCf,SAAkBC,EAAcC,GAAuB,IAAD,EACpBC,mBAASF,GADW,mBAC7CG,EAD6C,KACnCC,EADmC,KAE9CC,EAAaC,mBACbC,EAAYD,kBAAO,GA+BzB,OA7BAE,qBAAW,WACLD,EAAUE,SAAwB,IAAbN,IACvBI,EAAUE,SAAU,EACpBR,OAED,CAACE,EAAUH,EAAMC,EAAUM,IAE9BC,qBAAW,WAMT,IAAME,EAAKC,aALX,WACMJ,EAAUE,SACZL,GAAY,SAAAQ,GAAC,OAAIA,EAAI,OAGW,KAGpC,OAFAP,EAAWI,QAAUC,EAEd,kBAAMG,cAAcR,EAAWI,YACrC,IAYI,CAACN,WAAUW,UALlB,WACEP,EAAUE,SAAU,EACpBI,cAAcR,EAAWI,UAGEM,WAV7B,SAAoBf,GAClBI,EAAYJ,GACZO,EAAUE,SAAU,KCTTO,MAff,SAAwBC,GACtB,IAAMC,EAAUZ,iBAAOW,EAASE,OAAOC,aADuB,EAEpClB,oBAAS,kBAAMgB,EAAQT,QAAQY,OAAOC,SAFF,mBAEvDA,EAFuD,KAEhDC,EAFgD,KAY9D,MAAO,CAACD,EARR,WACE,IAAMD,EAAOH,EAAQT,QAAQY,OACxBA,EAAKG,KAGRD,EAAS,MAFTA,EAASF,EAAKC,U,cCWb,SAASG,EAAT,GACL,MAAO,CACLC,aAF6D,EAAvCA,aAGtB5E,QAAS,EACTC,UAAW,EACXC,WAAY,EACZ2E,cAAc,EACdC,gBAAgB,EAChBC,YAAY,GAkCDC,MA1Bf,SAAqBC,EAAcC,GAAyB,IAAD,EACzD,OAAQA,EAAOC,MACb,IAAK,UACL,IAAK,aACL,IAAK,YACH,OAAO,2BACFF,GADL,uBAEGC,EAAOC,KAAOF,EAAMC,EAAOC,MAAQ,GAFtC,2BATN,SAAsBF,GACpB,OAAOA,EAAMjF,QAAUiF,EAAMhF,UAAYgF,EAAM/E,WAW7BkF,CAAaH,GAAS,GAAKA,EAAML,cAH/C,IAMF,IAAK,eACH,OAAO,2BAAIK,GAAX,IAAkBJ,cAAc,IAElC,IAAK,iBACH,OAAO,2BAAII,GAAX,IAAkBH,gBAAgB,IAEpC,IAAK,UACH,OAAO,2BAAIG,GAAX,IAAkBF,YAAY,IAEhC,QAEE,MAAM,IAAIM,MAAJ,wCAA2CH,EAAOC,S,kDC5C/CG,MATf,YAAoD,IAA/BC,EAA8B,EAA9BA,IAAKf,EAAyB,EAAzBA,MACxB,OACE,sBAAKrE,UAAWC,IAAM,UAAtB,UACE,+BAAOoE,IACP,0BAAUe,IAAKA,EAAKf,MAAOA,QCO3BgB,EAAU,IA2EDC,MApEf,YAAiD,IAA7BC,EAA4B,EAA5BA,UAA4B,EACpBC,qBAAWX,EAAa,CAACJ,aAP/B,IAO6DD,GADnC,mBACvCM,EADuC,KAChCW,EADgC,OAEb1B,EAAYwB,GAFC,mBAEvC5D,EAFuC,KAE7B+D,EAF6B,OAGJ5C,EAASuC,GAYnD,WACEI,EAAS,CAACT,KAAM,eAChBU,IACA5B,EAAWuB,MAfNnC,EAHuC,EAGvCA,SAAUY,EAH6B,EAG7BA,WAAYD,EAHiB,EAGjBA,UAkC7B,OAhCIiB,EAAMF,YAAYf,IAEjBlC,GAAamD,EAAMF,YAAYa,EAAS,CAACT,KAAM,YA+BlD,mCACE,sBAAKhF,UAAWC,IAAO,aAAvB,UACE,gDACA,eAACuC,EAAD,WACE,cAACK,EAAD,CAAMD,MAAOkC,EAAMF,WAAnB,SACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAMjD,SAAUA,EAAUK,SAnCtC,SAAkB2D,GAChBF,EAASE,EAAY,CAACX,KAAM,WAAa,CAACA,KAAM,cAChDU,IACA5B,EAAWuB,MAiCD,cAAC,EAAD,CAAYD,IAAKC,EAAShB,MAAOnB,IACjC,cAAC,EAAD,CACE9C,qBAAsB0E,EAAMH,eAC5BtE,mBAAoByE,EAAMJ,aAC1BpE,cAvBd,WACEmF,EAAS,CAACT,KAAM,mBAGhB,IAAIY,EAAmBjE,EAASO,QAAQ2D,QAAO,SAAAzD,GAAC,OAAKA,EAAEvC,YACvD+F,EAAmBE,IAAEC,QAAQH,IAEZ,GAAG5E,SAAU,EAC9B4E,EAAiB,GAAG5E,SAAU,GAgBlBT,YA7Bd,WACEkF,EAAS,CAACT,KAAM,iBAChBlB,EAAWZ,EA/BI,YA+DT,cAACL,EAAD,CAAMD,KAAMkC,EAAMF,WAAlB,SACE,cAACoB,EAAD,CACEnG,QAASiF,EAAMjF,QACfC,UAAWgF,EAAMhF,UACjBC,WAAY+E,EAAM/E,wB,uBCjF1BkG,EAAa,CACjB/E,OAAQ,GACRrB,SAAS,EACTmB,SAAS,G,4CAGX,iBACWkF,EADX,WAAA9D,EAAA,6DACW8D,EADX,SAC2BC,GACrB,IAAIxE,EAAW,CACXA,SAAS,GAAD,OAAKwE,EAAL,cAAYA,GACpBjE,QAAS,CAAC,2BACJ+D,GADG,IACS/E,QAAS,EAAEiF,GAAG7E,WAAYzB,SAAS,IAD5C,2BAEHoG,GAFG,IAES/E,QAAW,EAAFiF,GAAK7E,aAFvB,2BAGH2E,GAHG,IAGS/E,QAAW,EAAFiF,GAAK7E,aAHvB,2BAIH2E,GAJG,IAIS/E,QAAW,EAAFiF,GAAK7E,eAIpC,OAAO,2BAAIK,GAAX,IAAqBO,QAAS4D,IAAEC,QAAQpE,EAASO,YAG/CqD,EAAYO,IAAEM,MAAM,EAAE,IAAIjE,IAAI+D,GAftC,kBAiBSJ,IAAEC,QAAQR,IAjBnB,4C,sBAoBec,M,2CC1BTC,EAAc,CAClB,UAAW,SAAU,WAAY,SAAU,UAAW,QAAS,YAAa,SAC5E,QAAS,WAAY,SAAU,WAAY,SAAU,cAAe,WACpE,WAAY,QAAS,WAAY,WAAY,UAAW,aAAc,SACtE,UAAW,cAGbA,EAAOC,OAAS,WAAa,OAAOC,KAAKD,iBAAOC,KAAKC,OAAS,KAO9D,IAAMR,EAAa,CACjB/E,OAAQ,GACRrB,SAAS,EACTmB,SAAS,G,4CAGX,wCAAAoB,EAAA,sDACQmD,EAAY,GAETlD,EAAI,EAHf,YAGkBA,GAAK,IAHvB,iCAIsBqE,MAAM,2CAJ5B,cAIUC,EAJV,gBAKoCA,EAAIC,OALxC,OAKUA,EALV,OAOUC,EAAW,IAAIhF,IAAI+E,EAAKE,SACxBC,EAAQF,EAASG,SAASC,MAAM,KAAK,GAErCtF,EAAyB,CAC7BA,SAAUkF,EACV3E,QAAS,CAAC,2BACJ+D,GADG,IACS/E,OAAQ6F,EAAOlH,SAAS,IADjC,2BAEHoG,GAFG,IAES/E,OAAQoF,EAAOC,WAFxB,2BAGHN,GAHG,IAGS/E,OAAQoF,EAAOC,WAHxB,2BAIHN,GAJG,IAIS/E,OAAQoF,EAAOC,aAInChB,EAAU2B,KAAV,2BAAmBvF,GAAnB,IAA6BO,QAAS4D,IAAEC,QAAQpE,EAASO,YApB7D,QAG2BG,IAH3B,gDAuBSkD,GAvBT,6C,sBA0Be4B,I,EAAAA,G,2CC/CTC,GAAqB,sCACrBC,GAAS,UAAGC,4CAAH,EAA6C,GAE5D,SAASC,GAAeC,GACtB,IAAMC,EAAWD,EAAMC,SAAN,WAAqBD,EAAMC,SAA3B,MAA0C,GAErD9F,EAAwB,CAC5BA,SAAS,GAAD,OAAK8F,GAAL,OAAgBD,EAAM7F,UAC9BO,QAAS,IAGX,IAAK,IAAME,KAAKoF,EAAMtF,QACpB,GAAIsF,EAAMtF,QAAQE,GAAI,CACpB,IAAMlB,EAAqB,CACzBA,OAAQsG,EAAMtF,QAAQE,GACtBvC,QAAS2H,EAAME,iBAAmBtF,EAClCpB,SAAS,GAEXW,EAASO,QAAQgF,KAAKhG,GAI1B,OAAOS,E,8CAGT,gCAAAS,EAAA,6DACQuF,EAAU,CACd,YAAaN,IAFjB,SAKqBX,MAAMU,GAAoB,CAACO,YAAUC,MAAK,SAAAjB,GAAG,OAAIA,EAAIC,UAL1E,cAKQA,EALR,OAMQrB,EAAYqB,EACff,QAAO,SAACgC,GAAD,MAA2C,UAA/BA,EAAEC,4BACrB3F,IAAIoF,IART,kBAUShC,GAVT,4C,sBAaewC,O,gEC5BfC,QAAQC,QAkDOC,OAhDf,WAAgB,IAAD,EACqBjF,mBAAyB,IAD9C,mBACNsC,EADM,KACK4C,EADL,OAEiBlF,oBAAS,GAF1B,mBAENmF,EAFM,KAEGC,EAFH,KAIPC,EAAgB/C,EAAUkB,OAAS,EACzC,OACE,mCACE,eAACjE,EAAD,WACE,cAACK,EAAD,CAAMD,KAAM0F,EAAZ,SACE,cAAC,EAAD,CAAU/C,UAAWA,MAEvB,cAAC1C,EAAD,CAAMD,MAAO0F,EAAb,SACE,0BAAStI,UAAWC,KAAO,YAA3B,UACE,kDACA,wBACEO,SAAU4H,EACV3H,QAAS,WACP4H,GAAW,GACXhC,IAA4BuB,KAAKO,IAJrC,6BASA,wBACE3H,SAAU4H,EACV3H,QAAS,WACP4H,GAAW,GACXE,KAA2BX,KAAKO,IAJpC,iCASA,wBACE3H,SAAU4H,EACV3H,QAAS,WACP4H,GAAW,GACXN,KAA0BH,KAAKO,IAJnC,kCChCGK,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFxI,SAASyI,eAAe,SAM1BX,O","file":"static/js/main.b5ebc81b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3F8np\",\"answers\":\"Card_answers__uDw45\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"GameStatistics_statistics__CM0Le\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button-bar\":\"ButtonBar_button-bar__2n0ls\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answer\":\"Answer_answer__2YB8b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question\":\"Question_question__1iSNS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"GameLayout_game__IGevX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quiz-game\":\"QuizGame_quiz-game__UjBXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TimeoutBar_container__2Vo58\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-menu\":\"App_app-menu__1ySnZ\"};","import styles from './GameStatistics.module.css';\n\ninterface GameStatProps {\n  correct?: number,\n  incorrect?: number,\n  unanswered?: number\n}\n\nfunction GameStat({correct, incorrect, unanswered} : GameStatProps) {\n  return (\n    <section className={styles.statistics}>\n      {correct ? <p>Correct: { correct }</p> : '' }\n      {incorrect ? <p>Incorrect: { incorrect } </p> : '' }\n      {unanswered ? <p>Unanswered: { unanswered } </p> : ''}\n    </section>\n  );\n}\n\nexport default GameStat;","import styles from './ButtonBar.module.css';\n\ninterface ButtonBarProps {\n  revealBonusDisabled: boolean,\n  timeBonusDisabled: boolean,\n  onRevealBonus: () => void,\n  onTimeBonus: () => void,\n}\n\nfunction ButtonBar({revealBonusDisabled, timeBonusDisabled, onRevealBonus, onTimeBonus}: ButtonBarProps) {\n  return (\n    <section className={styles['button-bar']}>\n      <button \n        disabled={revealBonusDisabled} \n        onClick={onRevealBonus}>\n        50 / 50\n      </button>\n      <button \n        disabled={timeBonusDisabled} \n        onClick={onTimeBonus}> \n        +10 s\n      </button>\n      <button onClick={() => document.location.reload.bind(window.location)()}>Quit</button>\n    </section>\n  );\n}\n\nexport default ButtonBar;","import styles from './Answer.module.css';\n\ninterface AnswerProps {\n  correct: boolean,\n  visible: boolean,\n  onClick: (isCorrect: boolean) => void,\n  children: React.ReactNode,\n}\n\nfunction Answer({ visible, correct, onClick, children }: AnswerProps) {\n  return (\n    <button disabled={!visible} className={styles.answer} onClick={() => onClick(correct)}>\n      {children}\n    </button>\n  );\n}\n\nexport default Answer;","import styles from './Question.module.css';\n\ninterface QuestionProps {\n  children: string | URL;\n}\n\nfunction Question({ children }: QuestionProps) {\n  // background image css hack to fit the image into a grid cell\n  const imageStyle = {\n    backgroundImage: `url(${children.toString()})`,\n    backgroundSize: 'contain',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    height: '100%',\n  }\n\n  return (\n    <section className={styles.question} style={children instanceof URL ? imageStyle : undefined}>\n     {children instanceof URL ? '' : children }\n    </section>\n  );\n}\n\nexport default Question;","/**\n * [TODO]\n * - Shuffle answers. Do it upstream at data preparation?\n */\nimport Answer from './Answer';\nimport Question from './Question';\nimport { QuestionData } from '../utils/utils';\n\nimport styles from './Card.module.css';\n\ninterface CardProps {\n  question?: QuestionData,\n  onAnswer: (isCorrect: boolean) => void\n}\n\nfunction Card({question, onAnswer}: CardProps) {\n  if (!question) \n    return (\n      <p>Oh no! The game is broken. :-( The fix is on it's way!</p>\n    );\n\n  const answerItems = question?.answers.map( (a, i) => \n    <Answer key={i} \n      visible={a.visible}\n      correct={a.correct} \n      onClick={onAnswer}>\n        {a.answer}\n    </Answer>\n  );\n\n  return (\n    <section className={styles.card}>\n      <Question>{question.question}</Question>\n      <section className={styles.answers}>\n        {answerItems}\n      </section>\n    </section>\n  )\n}\n\nexport default Card;","import styles from './GameLayout.module.css';\n\nfunction GameLayout({children}:any) {\n  return (\n    <div className={styles['game']}>\n      <div>{children[0]}</div> {/* Header */}\n      <div>{children[1]}</div> {/* Card */}\n      <div>{children[2]}</div> {/* Timeout */}\n      <div>{children[3]}</div> {/* ButtonBar */}\n    </div>\n  );\n}\n\nexport default GameLayout","import { ReactElement, ReactNode } from \"react\";\n\ninterface ViewSwitchProps {\n  children: ReactElement<ViewProps>[] \n}\n\nexport function ViewSwitch({children}: ViewSwitchProps) {\n  return (\n    <>\n      {children.find(c => c.props.show)}\n    </>\n  );\n}\n\ninterface ViewProps {\n  show: boolean,\n  children?: ReactNode \n}\n\nexport function View({show, children}: ViewProps) {\n  return (\n    <>\n      {children}\n    </>\n  );\n}\n","import { useState, useEffect, useRef } from 'react';\n\nfunction useTimer(time: number, onExpire: () => void) {\n  const [timeLeft, setTimeLeft] = useState(time);\n  const intervalID = useRef();\n  const isRunning = useRef(true);\n\n  useEffect( () => {\n    if (isRunning.current && timeLeft === 0) {\n      isRunning.current = false;\n      onExpire();\n    }\n  }, [timeLeft, time, onExpire, isRunning]);\n\n  useEffect( () => {\n    function updateTime() {\n      if (isRunning.current) {\n        setTimeLeft(t => t - 1);\n      }\n    }\n    const id = setInterval( updateTime, 1000);\n    intervalID.current = id as any;\n\n    return () => clearInterval(intervalID.current);\n  }, []);\n\n  function resetTimer(time: number) {\n    setTimeLeft(time);\n    isRunning.current = true;\n  }\n\n  function stopTimer() {\n    isRunning.current = false;\n    clearInterval(intervalID.current);\n  }\n\n  return {timeLeft, stopTimer, resetTimer}\n}\n\nexport default useTimer;","import { useState, useRef } from 'react';\n\n// TODO\n// - Handle empty iterator case\nfunction useIterator<T>(iterable: Iterable<T>): [T, () => void] {\n  const iterRef = useRef(iterable[Symbol.iterator]());\n  const [value, setValue] = useState(() => iterRef.current.next().value);\n\n  function next() {\n    const next = iterRef.current.next();\n    if (!next.done)\n      setValue(next.value);\n    else\n      setValue(null);\n  }\n\n  return [value, next]\n}\n\nexport default useIterator;","/**\n * Game state logic\n */\n\ntype Action = \n  'correct' | \n  'incorrect' | \n  'unanswered' | \n  'useTimeBonus' | \n  'useRevealBonus' |\n  'endGame';\n\ninterface State {\n  maxQuestions: number,\n  correct: number,\n  incorrect: number,\n  unanswered: number,\n  hasTimeBonus: boolean,\n  hasRevealBonus: boolean,\n  isGameOver: boolean\n}\n\nexport function initGame({maxQuestions}: {maxQuestions: number}) {\n  return {\n    maxQuestions: maxQuestions,\n    correct: 0,\n    incorrect: 0,\n    unanswered: 0,\n    hasTimeBonus: true,\n    hasRevealBonus: true,\n    isGameOver: false\n  }\n}\n\nfunction totalAnswers(state: State) {\n  return state.correct + state.incorrect + state.unanswered;\n}\n\nfunction gameReducer(state: State, action: {type: Action}) {\n  switch (action.type) {\n    case 'correct':\n    case 'unanswered':\n    case 'incorrect':\n      return {\n        ...state, \n        [action.type]: state[action.type] + 1, // action.type and state property has equal names\n        isGameOver: totalAnswers(state) + 1 >= state.maxQuestions // +1 - one answer was added at the line above\n      };\n\n    case 'useTimeBonus':\n      return {...state, hasTimeBonus: false};\n\n    case 'useRevealBonus':\n      return {...state, hasRevealBonus: false};\n\n    case 'endGame':\n      return {...state, isGameOver: true};\n\n    default:\n      // Shouldn't be there. Types will not allow it.\n      throw new Error(`[statReducer] unknown action: ${action.type}`);\n  }\n}\n\nexport default gameReducer;","import styles from './TimeoutBar.module.css';\n\ninterface TimeoutBarProps {\n  max: number,\n  value: number\n}\n\nfunction TimeoutBar({max, value}: TimeoutBarProps) {\n  return (\n    <div className={styles['container']}>\n      <span>{value}</span>\n      <progress max={max} value={value} />\n    </div>\n  );\n}\n\nexport default TimeoutBar;","import { useReducer } from 'react';\nimport GameStatistics from './GameStatistics';\nimport ButtonBar from './ButtonBar';\nimport Card from './Card';\nimport GameLayout from './GameLayout';\nimport {ViewSwitch, View} from './ViewSwitch';\n\nimport { QuestionData } from '../utils/utils';\nimport useTimer from '../utils/useTimer';\nimport useIterator from '../utils/useIterator';\nimport gameReducer, { initGame } from '../models/gameReducer';\nimport styles from './QuizGame.module.css';\n\nimport _ from 'lodash';\nimport TimeoutBar from './TimeoutBar';\n\n// QuizGameProps is a better place for these \nconst TIME_BONUS = 10;\nconst TIMEOUT = 150;\nconst MAX_QUESTIONS = 10;\n\ninterface QuizGameProps {\n  questions: Iterable<QuestionData>\n}\n\nfunction QuizGame({ questions }: QuizGameProps) {\n  const [state, dispatch] = useReducer(gameReducer, {maxQuestions: MAX_QUESTIONS}, initGame);\n  const [question, nextQuestion] = useIterator(questions);\n  const {timeLeft, resetTimer, stopTimer} = useTimer(TIMEOUT, onTimeout);\n\n  if (state.isGameOver) stopTimer();\n\n  if (!question && !state.isGameOver) dispatch({type: 'endGame'});\n\n  function onAnswer(isCorrect: boolean) {\n    dispatch(isCorrect ? {type: 'correct'} : {type: 'incorrect'});\n    nextQuestion();\n    resetTimer(TIMEOUT);\n  }\n\n  function onTimeout() {\n    dispatch({type: 'unanswered'});\n    nextQuestion();\n    resetTimer(TIMEOUT);\n  }\n\n  function onTimeBonus() {\n    dispatch({type: 'useTimeBonus'});\n    resetTimer(timeLeft + TIME_BONUS);\n  }\n\n  function onRevealBonus() {\n    dispatch({type: 'useRevealBonus'});   \n\n    // [TODO] works but not a reacty way of doing it. update state instead of mutating it\n    let incorrectAnswers = question.answers.filter(a => !a.correct);\n    incorrectAnswers = _.shuffle(incorrectAnswers);\n       \n    incorrectAnswers[0].visible = false;\n    incorrectAnswers[1].visible = false;\n  }\n\n  return (\n    <>\n      <div className={styles['quiz-game']}>\n        <header>Quiz Time!</header>\n        <ViewSwitch>\n          <View show={!state.isGameOver}>\n            <GameLayout>\n              <Card question={question} onAnswer={onAnswer}></Card> \n              <TimeoutBar max={TIMEOUT} value={timeLeft} />\n              <ButtonBar\n                revealBonusDisabled={!state.hasRevealBonus}\n                timeBonusDisabled={!state.hasTimeBonus}\n                onRevealBonus={onRevealBonus}\n                onTimeBonus={onTimeBonus}\n              />\n            </GameLayout>\n          </View>\n\n          <View show={state.isGameOver}>\n            <GameStatistics \n              correct={state.correct}\n              incorrect={state.incorrect}\n              unanswered={state.unanswered}\n            />\n          </View>\n        </ViewSwitch>\n      </div>\n    </>\n  );\n}\n\nexport default QuizGame;","import _ from 'lodash';\nimport { QuestionData } from './utils';\n\nconst answerStub = {\n  answer: '',\n  correct: false, \n  visible: true,\n}\n\nasync function createStringTestQuestions(): Promise<QuestionData[]> {\n  function getMathQuestion(n: number) {\n      let question = {\n          question: `${n} + ${n}`,\n          answers: [\n            {...answerStub, answer: (2*n).toString(), correct: true },\n            {...answerStub, answer: (n*1).toString() },\n            {...answerStub, answer: (n*3).toString() },\n            {...answerStub, answer: (n*4).toString() },\n          ]\n        }\n\n      return {...question, answers: _.shuffle(question.answers)};\n  }\n\n  const questions = _.range(1,20).map(getMathQuestion);\n\n  return _.shuffle(questions);\n}\n\nexport default createStringTestQuestions;","import _, { random } from 'lodash';\nimport { QuestionData } from './utils';\n\nconst BREEDS: any = [\n  \"basenji\", \"beagle\", \"bluetick\", \"borzoi\", \"bouvier\", \"boxer\", \"brabancon\", \"briard\",\n  \"husky\", \"keeshond\", \"kelpie\", \"komondor\", \"kuvasz\", \"labradoodle\", \"labrador\", \n  \"leonberg\", \"lhasa\", \"malamute\", \"malinois\", \"maltese\", \"rottweiler\", \"saluki\",\n  \"samoyed\", \"schipperke\",\n];\n\nBREEDS.random = function() { return this[random(this.length - 1)] };\n\ninterface DogResponse {\n  message: string,\n  status: string\n}\n\nconst answerStub = {\n  answer: '',\n  correct: false, \n  visible: true,\n}\n\nasync function createImagesTestQuestions(): Promise<QuestionData[]> {\n  const questions = [];\n\n  for (let i = 0; i <= 15; i++) {\n    const res = await fetch(\"https://dog.ceo/api/breeds/image/random\");\n    const json: DogResponse = await res.json();\n\n    const imageURL = new URL(json.message);\n    const breed = imageURL.pathname.split('/')[2];\n\n    const question: QuestionData = {\n      question: imageURL,\n      answers: [\n        {...answerStub, answer: breed, correct: true},\n        {...answerStub, answer: BREEDS.random()},\n        {...answerStub, answer: BREEDS.random()},\n        {...answerStub, answer: BREEDS.random()},\n      ]\n    }\n\n    questions.push({...question, answers: _.shuffle(question.answers)});    \n  }\n\n  return questions;\n}\n\nexport default createImagesTestQuestions;","import { QuestionData, AnswerData } from './utils';\n\nconst QUESTIONS_ENDPOINT = 'https://quizapi.io/api/v1/questions';\nconst API_TOKEN = process.env.REACT_APP_QUIZAPI_IO_TOKEN ?? '';\n\nfunction toQuestionData(qdata: any): QuestionData {\n  const category = qdata.category ? `[${qdata.category}] ` : '';\n\n  const question:QuestionData = {\n    question: `${category}${qdata.question}`,\n    answers: []\n  }\n\n  for (const a in qdata.answers) {\n    if (qdata.answers[a]) {\n      const answer: AnswerData = {\n        answer: qdata.answers[a], \n        correct: qdata.correct_answer === a, \n        visible: true\n      };\n      question.answers.push(answer);\n    }\n  }\n\n  return question;\n}\n\nasync function fetchQuizApiIoQuestions(): Promise<QuestionData[]> {\n  const headers = {\n    'X-Api-Key': API_TOKEN\n  }\n\n  const json = await fetch(QUESTIONS_ENDPOINT, {headers}).then(res => res.json());\n  const questions = json\n    .filter((q: any) => q.multiple_correct_answers === 'false') // we don't support multiple answers\n    .map(toQuestionData);\n\n  return questions;\n}\n\nexport default fetchQuizApiIoQuestions;","import { useState } from 'react';\n\nimport QuizGame from './components/QuizGame';\nimport {ViewSwitch, View} from './components/ViewSwitch';\n\nimport createStringTestQuestions from './utils/test-questions-text';\nimport createImageTestQuestions from './utils/test-questions-images';\nimport fetchQuizApiIoQuestions from './utils/quizapi-io';\nimport { QuestionData } from './utils/utils';\n\nimport styles from './App.module.css';\n\nconsole.clear();\n\nfunction App() {\n  const [questions, setQuestions] = useState<QuestionData[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const gameDataReady = questions.length > 0;\n  return (\n    <>\n      <ViewSwitch>\n        <View show={gameDataReady}>\n          <QuizGame questions={questions} />\n        </View>\n        <View show={!gameDataReady}>\n          <section className={styles['app-menu']}>\n            <header>Choose Game:</header>\n            <button \n              disabled={loading} \n              onClick={() => {\n                setLoading(true);\n                createStringTestQuestions().then(setQuestions)\n              }\n            }>\n              Dummy math quiz\n            </button>\n            <button \n              disabled={loading} \n              onClick={() => {\n                setLoading(true);\n                createImageTestQuestions().then(setQuestions)\n              }\n            }>\n              Can you name a dog?\n            </button>\n            <button \n              disabled={loading} \n              onClick={() => {\n                setLoading(true);\n                fetchQuizApiIoQuestions().then(setQuestions)\n              }\n            }>\n              Tech quiz\n            </button>\n          </section>\n        </View>\n      </ViewSwitch>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}